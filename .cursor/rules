# PSS (Prerendered Static Site Generator) - Cursor AI Documentation

## Project Overview

PSS is a Node.js tool that prerenders static sites by crawling web pages using Playwright and generating static HTML files. It's designed to be fast, flexible, and easy to use with modern web frameworks.

## Project Structure

This project uses **pnpm workspaces** to organize code into composable packages:

```
pss/
├── packages/                  # Reusable packages
│   ├── types/                # TypeScript types and Zod schemas
│   ├── config/               # Configuration loading and validation
│   ├── server/               # Static file server
│   ├── browser/              # Browser automation with Playwright
│   ├── core/                 # Core prerendering logic
│   └── cli/                  # CLI interface
├── apps/
│   └── pss/                  # Main application entry point
├── biome.json                # Biome configuration (linting/formatting)
├── pnpm-workspace.yaml       # pnpm workspace configuration
└── tsconfig.json            # Base TypeScript configuration
```

## Key Technologies

- **TypeScript**: All code is written in TypeScript
- **Playwright**: Browser automation for taking page snapshots
- **Zod**: Schema validation for configuration
- **pnpm**: Package manager with workspace support
- **Biome**: Modern linting and formatting tool
- **Node.js**: Runtime environment

## Core Concepts

### 1. Configuration System (`@pss/config`)
- Supports multiple config file formats: `.js`, `.ts`, `.json`, `.mjs`, `.cjs`
- Configuration discovery from various locations
- Zod schema validation for type safety
- Merging of configs from different sources

### 2. Browser Automation (`@pss/browser`)
- Playwright-powered page snapshots
- Configurable strip modes: `none`, `meta`, `head`
- Retry logic with exponential backoff
- Metadata extraction from pages
- Viewport and timeout configuration

### 3. Static Server (`@pss/server`)
- Serves static files during prerendering
- Automatic port allocation
- Proper HTTP headers for development
- Graceful shutdown handling

### 4. Core Engine (`@pss/core`)
- Orchestrates the entire prerendering process
- Concurrency control using p-limit
- Route discovery and processing
- Output file generation with flexible naming

### 5. CLI Interface (`@pss/cli`)
- User-friendly command-line interface
- Configuration overrides via CLI flags
- Dry-run mode for testing
- Verbose logging options

## Development Workflow

### Commands
```bash
# Install dependencies
pnpm install

# Format code
pnpm format

# Lint code
pnpm lint

# Build packages
pnpm build

# Run in development
pnpm dev
```

### Code Style
- **Biome** is configured for consistent formatting and linting
- **Auto-format on save** is enabled in VS Code
- **Import sorting** is automatic
- **Single quotes** for JavaScript/TypeScript
- **2-space indentation**
- **100-character line width**

## Configuration Options

Key configuration options available in `pss.config.js` or `package.json`:

```typescript
interface PSSConfig {
  serveDir: string;          // Directory to serve static files from
  outDir: string;            // Output directory for prerendered files
  routes: string[];          // Specific routes to prerender
  concurrency: number;       // Number of concurrent pages to process
  stripMode: 'none' | 'meta' | 'head'; // HTML stripping mode
  flatOutput: boolean;       // Use flat file structure vs nested
  extraDelay: number;        // Extra delay before taking snapshots
  retry: number;             // Number of retry attempts
  // ... and many more options
}
```

## Architecture Patterns

### 1. Dependency Injection
- Classes accept configuration objects in constructors
- Dependencies are injected rather than hardcoded
- Easy to test and mock

### 2. Error Handling
- Comprehensive error handling with meaningful messages
- Retry logic where appropriate
- Graceful degradation

### 3. Event-Driven Design
- Async/await throughout
- Promise-based APIs
- Proper resource cleanup

### 4. Modular Architecture
- Each package has a single responsibility
- Clear interfaces between packages
- Workspace dependencies using `workspace:*`

## Common Tasks

### Adding a New Feature
1. Identify which package it belongs to
2. Add types to `@pss/types` if needed
3. Implement the feature in the appropriate package
4. Update CLI interface if user-facing
5. Add tests and documentation

### Debugging
- Use `--verbose` flag for detailed logging
- Check browser console for client-side errors
- Use `--dry-run` to test configuration
- Enable debugging in Playwright if needed

### Performance Optimization
- Adjust `concurrency` setting
- Use `stripMode` to reduce HTML size
- Consider `flatOutput` for simpler file structure
- Monitor memory usage with large sites

## Best Practices

### Code Quality
- All functions should have proper TypeScript types
- Use Zod schemas for runtime validation
- Handle errors gracefully with meaningful messages
- Write self-documenting code with good naming

### Testing
- Unit tests for individual functions
- Integration tests for complete workflows
- Mock external dependencies (browser, filesystem)
- Test error conditions and edge cases

### Documentation
- Update this file when adding major features
- Include JSDoc comments for complex functions
- Keep README files up to date
- Document breaking changes

## Troubleshooting

### Common Issues
- **Module not found**: Check workspace dependencies and build order
- **Playwright errors**: Ensure browser is installed (`npx playwright install`)
- **Port conflicts**: Server will auto-allocate ports
- **Memory issues**: Reduce concurrency or enable garbage collection

### Debugging Commands
```bash
# Check workspace dependencies
pnpm list --depth=0

# Rebuild all packages
pnpm build

# Run with verbose logging
pnpm dev --verbose

# Test configuration
pnpm dev --dry-run
```

## Future Enhancements

See `TODO.md` for planned features and improvements. Key areas for expansion:
- Non-HTML outputs (RSS, JSON feeds, sitemaps)
- Advanced crawling strategies
- Performance optimizations
- Better error reporting
- Plugin system

---

This documentation is maintained by the development team. When making significant changes, please update this file accordingly. 