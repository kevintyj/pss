You are helping with the PSS (Prerendered Static Site Generator) project - a TypeScript monorepo that generates static HTML files from web applications using Playwright.

PROJECT CONTEXT:
- Location: /Users/kevintyj/git/kevintyj/pss
- Structure: pnpm workspace with 7 packages (types, config, server, browser, core, cli, pss)
- Build system: esbuild + TypeScript with monorepo build orchestration
- Tech stack: TypeScript, Playwright, Zod, pnpm, Biome
- Purpose: Fast, flexible prerendering tool for static site generation

IMPORTANT NOTES:
- All packages are standardized with consistent build configurations
- Uses esbuild for bundling and TypeScript for type generation
- Main entry point is packages/pss (re-exports everything)
- CLI is in packages/cli with comprehensive argument parsing
- Core logic is in packages/core with PrerenderEngine class
- Browser automation is in packages/browser with Playwright integration
- Configuration system is in packages/config with multiple format support
- Server is in packages/server with SPA fallback support
- Types are in packages/types with Zod schemas for validation

DEVELOPMENT WORKFLOW:
- Use `pnpm install` for dependencies
- Use `pnpm build` to build all packages
- Use `pnpm dev` to test with solid-example
- Use `pnpm format` and `pnpm lint` for code quality
- Build order: types → config/browser/server → core → cli/pss

COMMON TASKS:
- Adding new features: Start with types, then implementation
- Fixing build issues: Check package dependencies and build order
- Testing: Use solid-example in packages/solid-example/
- Documentation: Update README files for any new features
- Configuration: Use packages/config for loading/validation

The project is ready for public release with professional documentation and consistent structure.